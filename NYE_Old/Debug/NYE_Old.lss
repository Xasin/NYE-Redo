
NYE_Old.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000071e  000007b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000071e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  000007b2  2**0
                  ALLOC
  3 .stab         000023ac  00000000  00000000  000007b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001183  00000000  00000000  00002b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003ce3  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	34 c0       	rjmp	.+104    	; 0x6a <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_start>:
  68:	6f 02       	muls	r22, r31

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 30       	cpi	r26, 0x05	; 5
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>

00000086 <__do_global_ctors>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	ca e6       	ldi	r28, 0x6A	; 106
  8a:	d0 e0       	ldi	r29, 0x00	; 0
  8c:	03 c0       	rjmp	.+6      	; 0x94 <__do_global_ctors+0xe>
  8e:	22 97       	sbiw	r28, 0x02	; 2
  90:	fe 01       	movw	r30, r28
  92:	33 d2       	rcall	.+1126   	; 0x4fa <__tablejump__>
  94:	c8 36       	cpi	r28, 0x68	; 104
  96:	d1 07       	cpc	r29, r17
  98:	d1 f7       	brne	.-12     	; 0x8e <__do_global_ctors+0x8>
  9a:	82 d1       	rcall	.+772    	; 0x3a0 <main>
  9c:	3e c3       	rjmp	.+1660   	; 0x71a <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <_ZN9DualShift6bitOutEh>:
 *      Author: xasin
 */

#include "DualShift.h"

void DualShift::bitOut(uint8_t b) {
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	00 d0       	rcall	.+0      	; 0xa6 <_ZN9DualShift6bitOutEh+0x6>
  a6:	1f 92       	push	r1
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	9a 83       	std	Y+2, r25	; 0x02
  ae:	89 83       	std	Y+1, r24	; 0x01
  b0:	6b 83       	std	Y+3, r22	; 0x03
	if(b != 0)
  b2:	8b 81       	ldd	r24, Y+3	; 0x03
  b4:	88 23       	and	r24, r24
  b6:	e9 f0       	breq	.+58     	; 0xf2 <_ZN9DualShift6bitOutEh+0x52>
		*(IOREG) |= (1<<PINS);
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	9a 81       	ldd	r25, Y+2	; 0x02
  bc:	fc 01       	movw	r30, r24
  be:	80 81       	ld	r24, Z
  c0:	91 81       	ldd	r25, Z+1	; 0x01
  c2:	29 81       	ldd	r18, Y+1	; 0x01
  c4:	3a 81       	ldd	r19, Y+2	; 0x02
  c6:	f9 01       	movw	r30, r18
  c8:	20 81       	ld	r18, Z
  ca:	31 81       	ldd	r19, Z+1	; 0x01
  cc:	f9 01       	movw	r30, r18
  ce:	20 81       	ld	r18, Z
  d0:	62 2f       	mov	r22, r18
  d2:	29 81       	ldd	r18, Y+1	; 0x01
  d4:	3a 81       	ldd	r19, Y+2	; 0x02
  d6:	f9 01       	movw	r30, r18
  d8:	22 81       	ldd	r18, Z+2	; 0x02
  da:	42 2f       	mov	r20, r18
  dc:	50 e0       	ldi	r21, 0x00	; 0
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <_ZN9DualShift6bitOutEh+0x48>
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	4a 95       	dec	r20
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <_ZN9DualShift6bitOutEh+0x44>
  ec:	26 2b       	or	r18, r22
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
	*(IOREG) |= (1 << (PINS + 1));
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	9a 81       	ldd	r25, Y+2	; 0x02
  f6:	fc 01       	movw	r30, r24
  f8:	80 81       	ld	r24, Z
  fa:	91 81       	ldd	r25, Z+1	; 0x01
  fc:	29 81       	ldd	r18, Y+1	; 0x01
  fe:	3a 81       	ldd	r19, Y+2	; 0x02
 100:	f9 01       	movw	r30, r18
 102:	20 81       	ld	r18, Z
 104:	31 81       	ldd	r19, Z+1	; 0x01
 106:	f9 01       	movw	r30, r18
 108:	20 81       	ld	r18, Z
 10a:	62 2f       	mov	r22, r18
 10c:	29 81       	ldd	r18, Y+1	; 0x01
 10e:	3a 81       	ldd	r19, Y+2	; 0x02
 110:	f9 01       	movw	r30, r18
 112:	22 81       	ldd	r18, Z+2	; 0x02
 114:	22 2f       	mov	r18, r18
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	a9 01       	movw	r20, r18
 11a:	4f 5f       	subi	r20, 0xFF	; 255
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <_ZN9DualShift6bitOutEh+0x88>
 124:	22 0f       	add	r18, r18
 126:	33 1f       	adc	r19, r19
 128:	4a 95       	dec	r20
 12a:	e2 f7       	brpl	.-8      	; 0x124 <_ZN9DualShift6bitOutEh+0x84>
 12c:	26 2b       	or	r18, r22
 12e:	fc 01       	movw	r30, r24
 130:	20 83       	st	Z, r18

	*(IOREG) &= ~(0b11 << PINS);
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	9a 81       	ldd	r25, Y+2	; 0x02
 136:	fc 01       	movw	r30, r24
 138:	80 81       	ld	r24, Z
 13a:	91 81       	ldd	r25, Z+1	; 0x01
 13c:	29 81       	ldd	r18, Y+1	; 0x01
 13e:	3a 81       	ldd	r19, Y+2	; 0x02
 140:	f9 01       	movw	r30, r18
 142:	20 81       	ld	r18, Z
 144:	31 81       	ldd	r19, Z+1	; 0x01
 146:	f9 01       	movw	r30, r18
 148:	20 81       	ld	r18, Z
 14a:	62 2f       	mov	r22, r18
 14c:	29 81       	ldd	r18, Y+1	; 0x01
 14e:	3a 81       	ldd	r19, Y+2	; 0x02
 150:	f9 01       	movw	r30, r18
 152:	22 81       	ldd	r18, Z+2	; 0x02
 154:	42 2f       	mov	r20, r18
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	23 e0       	ldi	r18, 0x03	; 3
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	04 2e       	mov	r0, r20
 15e:	02 c0       	rjmp	.+4      	; 0x164 <_ZN9DualShift6bitOutEh+0xc4>
 160:	22 0f       	add	r18, r18
 162:	33 1f       	adc	r19, r19
 164:	0a 94       	dec	r0
 166:	e2 f7       	brpl	.-8      	; 0x160 <_ZN9DualShift6bitOutEh+0xc0>
 168:	20 95       	com	r18
 16a:	26 23       	and	r18, r22
 16c:	fc 01       	movw	r30, r24
 16e:	20 83       	st	Z, r18
}
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <_ZN9DualShift8activateEv>:

void DualShift::activate() {
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	00 d0       	rcall	.+0      	; 0x182 <_ZN9DualShift8activateEv+0x6>
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
 186:	9a 83       	std	Y+2, r25	; 0x02
 188:	89 83       	std	Y+1, r24	; 0x01
	*(IOREG) |= (1 << (PINS +2));
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	9a 81       	ldd	r25, Y+2	; 0x02
 18e:	fc 01       	movw	r30, r24
 190:	80 81       	ld	r24, Z
 192:	91 81       	ldd	r25, Z+1	; 0x01
 194:	29 81       	ldd	r18, Y+1	; 0x01
 196:	3a 81       	ldd	r19, Y+2	; 0x02
 198:	f9 01       	movw	r30, r18
 19a:	20 81       	ld	r18, Z
 19c:	31 81       	ldd	r19, Z+1	; 0x01
 19e:	f9 01       	movw	r30, r18
 1a0:	20 81       	ld	r18, Z
 1a2:	62 2f       	mov	r22, r18
 1a4:	29 81       	ldd	r18, Y+1	; 0x01
 1a6:	3a 81       	ldd	r19, Y+2	; 0x02
 1a8:	f9 01       	movw	r30, r18
 1aa:	22 81       	ldd	r18, Z+2	; 0x02
 1ac:	22 2f       	mov	r18, r18
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	a9 01       	movw	r20, r18
 1b2:	4e 5f       	subi	r20, 0xFE	; 254
 1b4:	5f 4f       	sbci	r21, 0xFF	; 255
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <_ZN9DualShift8activateEv+0x44>
 1bc:	22 0f       	add	r18, r18
 1be:	33 1f       	adc	r19, r19
 1c0:	4a 95       	dec	r20
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <_ZN9DualShift8activateEv+0x40>
 1c4:	26 2b       	or	r18, r22
 1c6:	fc 01       	movw	r30, r24
 1c8:	20 83       	st	Z, r18
	*(IOREG) &= ~(1 << (PINS +2));
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	9a 81       	ldd	r25, Y+2	; 0x02
 1ce:	fc 01       	movw	r30, r24
 1d0:	80 81       	ld	r24, Z
 1d2:	91 81       	ldd	r25, Z+1	; 0x01
 1d4:	29 81       	ldd	r18, Y+1	; 0x01
 1d6:	3a 81       	ldd	r19, Y+2	; 0x02
 1d8:	f9 01       	movw	r30, r18
 1da:	20 81       	ld	r18, Z
 1dc:	31 81       	ldd	r19, Z+1	; 0x01
 1de:	f9 01       	movw	r30, r18
 1e0:	20 81       	ld	r18, Z
 1e2:	62 2f       	mov	r22, r18
 1e4:	29 81       	ldd	r18, Y+1	; 0x01
 1e6:	3a 81       	ldd	r19, Y+2	; 0x02
 1e8:	f9 01       	movw	r30, r18
 1ea:	22 81       	ldd	r18, Z+2	; 0x02
 1ec:	22 2f       	mov	r18, r18
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	a9 01       	movw	r20, r18
 1f2:	4e 5f       	subi	r20, 0xFE	; 254
 1f4:	5f 4f       	sbci	r21, 0xFF	; 255
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	04 2e       	mov	r0, r20
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <_ZN9DualShift8activateEv+0x86>
 1fe:	22 0f       	add	r18, r18
 200:	33 1f       	adc	r19, r19
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <_ZN9DualShift8activateEv+0x82>
 206:	20 95       	com	r18
 208:	26 23       	and	r18, r22
 20a:	fc 01       	movw	r30, r24
 20c:	20 83       	st	Z, r18
}
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <_ZN9DualShift8shiftOutEh>:

void DualShift::shiftOut(uint8_t data) {
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	00 d0       	rcall	.+0      	; 0x21e <_ZN9DualShift8shiftOutEh+0x6>
 21e:	00 d0       	rcall	.+0      	; 0x220 <_ZN9DualShift8shiftOutEh+0x8>
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
 224:	9b 83       	std	Y+3, r25	; 0x03
 226:	8a 83       	std	Y+2, r24	; 0x02
 228:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8_t i=0; i<8; i++) {
 22a:	19 82       	std	Y+1, r1	; 0x01
 22c:	0d c0       	rjmp	.+26     	; 0x248 <_ZN9DualShift8shiftOutEh+0x30>
		this->bitOut((data & 0b10000000));
 22e:	8c 81       	ldd	r24, Y+4	; 0x04
 230:	28 2f       	mov	r18, r24
 232:	20 78       	andi	r18, 0x80	; 128
 234:	8a 81       	ldd	r24, Y+2	; 0x02
 236:	9b 81       	ldd	r25, Y+3	; 0x03
 238:	62 2f       	mov	r22, r18
 23a:	32 df       	rcall	.-412    	; 0xa0 <_ZN9DualShift6bitOutEh>
 23c:	8c 81       	ldd	r24, Y+4	; 0x04
		data = (data << 1);
 23e:	88 0f       	add	r24, r24
 240:	8c 83       	std	Y+4, r24	; 0x04
 242:	89 81       	ldd	r24, Y+1	; 0x01
	*(IOREG) |= (1 << (PINS +2));
	*(IOREG) &= ~(1 << (PINS +2));
}

void DualShift::shiftOut(uint8_t data) {
	for(uint8_t i=0; i<8; i++) {
 244:	8f 5f       	subi	r24, 0xFF	; 255
 246:	89 83       	std	Y+1, r24	; 0x01
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	88 30       	cpi	r24, 0x08	; 8
 24c:	80 f3       	brcs	.-32     	; 0x22e <_ZN9DualShift8shiftOutEh+0x16>
 24e:	0f 90       	pop	r0
		this->bitOut((data & 0b10000000));
		data = (data << 1);
	}
}
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <_ZN9DualShiftC1EPVhh>:

DualShift::DualShift(volatile uint8_t *port, uint8_t pins) {
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	00 d0       	rcall	.+0      	; 0x262 <_ZN9DualShiftC1EPVhh+0x6>
 262:	00 d0       	rcall	.+0      	; 0x264 <_ZN9DualShiftC1EPVhh+0x8>
 264:	1f 92       	push	r1
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
 26a:	9a 83       	std	Y+2, r25	; 0x02
 26c:	89 83       	std	Y+1, r24	; 0x01
 26e:	7c 83       	std	Y+4, r23	; 0x04
 270:	6b 83       	std	Y+3, r22	; 0x03
 272:	4d 83       	std	Y+5, r20	; 0x05
 274:	89 81       	ldd	r24, Y+1	; 0x01
 276:	9a 81       	ldd	r25, Y+2	; 0x02
 278:	fc 01       	movw	r30, r24
 27a:	13 82       	std	Z+3, r1	; 0x03
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	9a 81       	ldd	r25, Y+2	; 0x02
 280:	fc 01       	movw	r30, r24
 282:	14 82       	std	Z+4, r1	; 0x04
	this->IOREG = port;
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	9a 81       	ldd	r25, Y+2	; 0x02
 288:	2b 81       	ldd	r18, Y+3	; 0x03
 28a:	3c 81       	ldd	r19, Y+4	; 0x04
 28c:	fc 01       	movw	r30, r24
 28e:	31 83       	std	Z+1, r19	; 0x01
 290:	20 83       	st	Z, r18
	*(port -1) |= (0b111 << pins);
 292:	8b 81       	ldd	r24, Y+3	; 0x03
 294:	9c 81       	ldd	r25, Y+4	; 0x04
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	2b 81       	ldd	r18, Y+3	; 0x03
 29a:	3c 81       	ldd	r19, Y+4	; 0x04
 29c:	21 50       	subi	r18, 0x01	; 1
 29e:	31 09       	sbc	r19, r1
 2a0:	f9 01       	movw	r30, r18
 2a2:	20 81       	ld	r18, Z
 2a4:	62 2f       	mov	r22, r18
 2a6:	2d 81       	ldd	r18, Y+5	; 0x05
 2a8:	42 2f       	mov	r20, r18
 2aa:	50 e0       	ldi	r21, 0x00	; 0
 2ac:	27 e0       	ldi	r18, 0x07	; 7
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	04 2e       	mov	r0, r20
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <_ZN9DualShiftC1EPVhh+0x5c>
 2b4:	22 0f       	add	r18, r18
 2b6:	33 1f       	adc	r19, r19
 2b8:	0a 94       	dec	r0
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <_ZN9DualShiftC1EPVhh+0x58>
 2bc:	26 2b       	or	r18, r22
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18

	this->PINS = pins;
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	9a 81       	ldd	r25, Y+2	; 0x02
 2c6:	2d 81       	ldd	r18, Y+5	; 0x05
 2c8:	fc 01       	movw	r30, r24
 2ca:	22 83       	std	Z+2, r18	; 0x02
}
 2cc:	0f 90       	pop	r0
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <_ZN9DualShift6updateEv>:

void DualShift::update() {
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	00 d0       	rcall	.+0      	; 0x2e2 <_ZN9DualShift6updateEv+0x6>
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
 2e6:	9a 83       	std	Y+2, r25	; 0x02
 2e8:	89 83       	std	Y+1, r24	; 0x01
	this->shiftOut(this->REG_B);
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
 2ec:	9a 81       	ldd	r25, Y+2	; 0x02
 2ee:	fc 01       	movw	r30, r24
 2f0:	24 81       	ldd	r18, Z+4	; 0x04
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	9a 81       	ldd	r25, Y+2	; 0x02
 2f6:	62 2f       	mov	r22, r18
 2f8:	8f df       	rcall	.-226    	; 0x218 <_ZN9DualShift8shiftOutEh>
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
	this->shiftOut(this->REG_A);
 2fc:	9a 81       	ldd	r25, Y+2	; 0x02
 2fe:	fc 01       	movw	r30, r24
 300:	23 81       	ldd	r18, Z+3	; 0x03
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	9a 81       	ldd	r25, Y+2	; 0x02
 306:	62 2f       	mov	r22, r18
 308:	87 df       	rcall	.-242    	; 0x218 <_ZN9DualShift8shiftOutEh>
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	9a 81       	ldd	r25, Y+2	; 0x02
	this->activate();
 30e:	36 df       	rcall	.-404    	; 0x17c <_ZN9DualShift8activateEv>
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	df 91       	pop	r29
}
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <_Z9setOutputh>:

#include "DualShift.h"

DualShift output(&PORTB, 0);

void setOutput(uint8_t n) {
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	1f 92       	push	r1
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
 324:	89 83       	std	Y+1, r24	; 0x01

#define X 6
#define Y 6

	if(n < (X*Y)) {
 326:	89 81       	ldd	r24, Y+1	; 0x01
 328:	84 32       	cpi	r24, 0x24	; 36
 32a:	78 f5       	brcc	.+94     	; 0x38a <_Z9setOutputh+0x70>
		output.REG_A = (1 << (n % X));
 32c:	29 81       	ldd	r18, Y+1	; 0x01
 32e:	8b ea       	ldi	r24, 0xAB	; 171
 330:	28 9f       	mul	r18, r24
 332:	81 2d       	mov	r24, r1
 334:	11 24       	eor	r1, r1
 336:	98 2f       	mov	r25, r24
 338:	96 95       	lsr	r25
 33a:	96 95       	lsr	r25
 33c:	89 2f       	mov	r24, r25
 33e:	88 0f       	add	r24, r24
 340:	89 0f       	add	r24, r25
 342:	88 0f       	add	r24, r24
 344:	92 2f       	mov	r25, r18
 346:	98 1b       	sub	r25, r24
 348:	29 2f       	mov	r18, r25
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <_Z9setOutputh+0x3c>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	2a 95       	dec	r18
 358:	e2 f7       	brpl	.-8      	; 0x352 <_Z9setOutputh+0x38>
 35a:	80 93 03 01 	sts	0x0103, r24
		output.REG_B = (1 << (n / X));
 35e:	99 81       	ldd	r25, Y+1	; 0x01
 360:	8b ea       	ldi	r24, 0xAB	; 171
 362:	98 9f       	mul	r25, r24
 364:	81 2d       	mov	r24, r1
 366:	11 24       	eor	r1, r1
 368:	86 95       	lsr	r24
 36a:	86 95       	lsr	r24
 36c:	28 2f       	mov	r18, r24
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <_Z9setOutputh+0x60>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	2a 95       	dec	r18
 37c:	e2 f7       	brpl	.-8      	; 0x376 <_Z9setOutputh+0x5c>
 37e:	80 93 04 01 	sts	0x0104, r24
		output.update();
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	aa df       	rcall	.-172    	; 0x2dc <_ZN9DualShift6updateEv>
 388:	07 c0       	rjmp	.+14     	; 0x398 <_Z9setOutputh+0x7e>
 38a:	10 92 03 01 	sts	0x0103, r1
	}
	else {
		output.REG_A = 0;
 38e:	10 92 04 01 	sts	0x0104, r1
		output.REG_B = 0;
 392:	80 e0       	ldi	r24, 0x00	; 0
		output.update();
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	a2 df       	rcall	.-188    	; 0x2dc <_ZN9DualShift6updateEv>
 398:	0f 90       	pop	r0
 39a:	df 91       	pop	r29
	}
}
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <main>:

int main() {
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	2f 97       	sbiw	r28, 0x0f	; 15
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61

	uint8_t t=0;
 3b4:	19 82       	std	Y+1, r1	; 0x01
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	a8 ec       	ldi	r26, 0xC8	; 200
 3bc:	b2 e4       	ldi	r27, 0x42	; 66
 3be:	8a 83       	std	Y+2, r24	; 0x02
 3c0:	9b 83       	std	Y+3, r25	; 0x03
 3c2:	ac 83       	std	Y+4, r26	; 0x04
 3c4:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	30 e4       	ldi	r19, 0x40	; 64
 3ca:	4c e9       	ldi	r20, 0x9C	; 156
 3cc:	55 e4       	ldi	r21, 0x45	; 69
 3ce:	6a 81       	ldd	r22, Y+2	; 0x02
 3d0:	7b 81       	ldd	r23, Y+3	; 0x03
 3d2:	8c 81       	ldd	r24, Y+4	; 0x04
 3d4:	9d 81       	ldd	r25, Y+5	; 0x05
 3d6:	16 d1       	rcall	.+556    	; 0x604 <__mulsf3>
 3d8:	dc 01       	movw	r26, r24
 3da:	cb 01       	movw	r24, r22
 3dc:	8e 83       	std	Y+6, r24	; 0x06
 3de:	9f 83       	std	Y+7, r25	; 0x07
 3e0:	a8 87       	std	Y+8, r26	; 0x08
 3e2:	b9 87       	std	Y+9, r27	; 0x09
 3e4:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	40 e8       	ldi	r20, 0x80	; 128
 3ea:	5f e3       	ldi	r21, 0x3F	; 63
 3ec:	6e 81       	ldd	r22, Y+6	; 0x06
 3ee:	7f 81       	ldd	r23, Y+7	; 0x07
 3f0:	88 85       	ldd	r24, Y+8	; 0x08
 3f2:	99 85       	ldd	r25, Y+9	; 0x09
 3f4:	86 d0       	rcall	.+268    	; 0x502 <__cmpsf2>
 3f6:	88 23       	and	r24, r24
 3f8:	2c f4       	brge	.+10     	; 0x404 <main+0x64>
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
 3fe:	9b 87       	std	Y+11, r25	; 0x0b
 400:	8a 87       	std	Y+10, r24	; 0x0a
 402:	3b c0       	rjmp	.+118    	; 0x47a <main+0xda>
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
 408:	4f e7       	ldi	r20, 0x7F	; 127
 40a:	57 e4       	ldi	r21, 0x47	; 71
 40c:	6e 81       	ldd	r22, Y+6	; 0x06
 40e:	7f 81       	ldd	r23, Y+7	; 0x07
 410:	88 85       	ldd	r24, Y+8	; 0x08
 412:	99 85       	ldd	r25, Y+9	; 0x09
 414:	f3 d0       	rcall	.+486    	; 0x5fc <__gesf2>
 416:	18 16       	cp	r1, r24
 418:	3c f5       	brge	.+78     	; 0x468 <main+0xc8>
 41a:	20 e0       	ldi	r18, 0x00	; 0
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 420:	51 e4       	ldi	r21, 0x41	; 65
 422:	6a 81       	ldd	r22, Y+2	; 0x02
 424:	7b 81       	ldd	r23, Y+3	; 0x03
 426:	8c 81       	ldd	r24, Y+4	; 0x04
 428:	9d 81       	ldd	r25, Y+5	; 0x05
 42a:	ec d0       	rcall	.+472    	; 0x604 <__mulsf3>
 42c:	dc 01       	movw	r26, r24
 42e:	cb 01       	movw	r24, r22
 430:	bc 01       	movw	r22, r24
 432:	cd 01       	movw	r24, r26
 434:	6a d0       	rcall	.+212    	; 0x50a <__fixunssfsi>
 436:	dc 01       	movw	r26, r24
 438:	cb 01       	movw	r24, r22
 43a:	9b 87       	std	Y+11, r25	; 0x0b
 43c:	8a 87       	std	Y+10, r24	; 0x0a
 43e:	0f c0       	rjmp	.+30     	; 0x45e <main+0xbe>
 440:	84 ef       	ldi	r24, 0xF4	; 244
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	9d 87       	std	Y+13, r25	; 0x0d
 446:	8c 87       	std	Y+12, r24	; 0x0c
 448:	8c 85       	ldd	r24, Y+12	; 0x0c
 44a:	9d 85       	ldd	r25, Y+13	; 0x0d
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <main+0xac>
 450:	9d 87       	std	Y+13, r25	; 0x0d
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 452:	8c 87       	std	Y+12, r24	; 0x0c
 454:	8a 85       	ldd	r24, Y+10	; 0x0a
 456:	9b 85       	ldd	r25, Y+11	; 0x0b
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	9b 87       	std	Y+11, r25	; 0x0b
 45c:	8a 87       	std	Y+10, r24	; 0x0a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 45e:	8a 85       	ldd	r24, Y+10	; 0x0a
 460:	9b 85       	ldd	r25, Y+11	; 0x0b
 462:	00 97       	sbiw	r24, 0x00	; 0
 464:	69 f7       	brne	.-38     	; 0x440 <main+0xa0>
 466:	13 c0       	rjmp	.+38     	; 0x48e <main+0xee>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 468:	6e 81       	ldd	r22, Y+6	; 0x06
 46a:	7f 81       	ldd	r23, Y+7	; 0x07
 46c:	88 85       	ldd	r24, Y+8	; 0x08
 46e:	99 85       	ldd	r25, Y+9	; 0x09
 470:	4c d0       	rcall	.+152    	; 0x50a <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 472:	dc 01       	movw	r26, r24
 474:	cb 01       	movw	r24, r22
 476:	9b 87       	std	Y+11, r25	; 0x0b
 478:	8a 87       	std	Y+10, r24	; 0x0a
 47a:	8a 85       	ldd	r24, Y+10	; 0x0a
 47c:	9b 85       	ldd	r25, Y+11	; 0x0b
 47e:	9f 87       	std	Y+15, r25	; 0x0f
 480:	8e 87       	std	Y+14, r24	; 0x0e
 482:	8e 85       	ldd	r24, Y+14	; 0x0e
 484:	9f 85       	ldd	r25, Y+15	; 0x0f
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	f1 f7       	brne	.-4      	; 0x486 <main+0xe6>
 48a:	9f 87       	std	Y+15, r25	; 0x0f
 48c:	8e 87       	std	Y+14, r24	; 0x0e
 48e:	89 81       	ldd	r24, Y+1	; 0x01
 490:	91 e0       	ldi	r25, 0x01	; 1
 492:	98 0f       	add	r25, r24
 494:	99 83       	std	Y+1, r25	; 0x01
 496:	41 df       	rcall	.-382    	; 0x31a <_Z9setOutputh>
 498:	8e cf       	rjmp	.-228    	; 0x3b6 <main+0x16>

0000049a <_Z41__static_initialization_and_destruction_0ii>:
		_delay_ms(100);
		setOutput(t++);
	}

	return 0;
}
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	00 d0       	rcall	.+0      	; 0x4a0 <_Z41__static_initialization_and_destruction_0ii+0x6>
 4a0:	00 d0       	rcall	.+0      	; 0x4a2 <_Z41__static_initialization_and_destruction_0ii+0x8>
 4a2:	cd b7       	in	r28, 0x3d	; 61
 4a4:	de b7       	in	r29, 0x3e	; 62
 4a6:	9a 83       	std	Y+2, r25	; 0x02
 4a8:	89 83       	std	Y+1, r24	; 0x01
 4aa:	7c 83       	std	Y+4, r23	; 0x04
 4ac:	6b 83       	std	Y+3, r22	; 0x03
 4ae:	89 81       	ldd	r24, Y+1	; 0x01
 4b0:	9a 81       	ldd	r25, Y+2	; 0x02
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	91 05       	cpc	r25, r1
 4b6:	61 f4       	brne	.+24     	; 0x4d0 <_Z41__static_initialization_and_destruction_0ii+0x36>
 4b8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ba:	9c 81       	ldd	r25, Y+4	; 0x04
 4bc:	8f 3f       	cpi	r24, 0xFF	; 255
 4be:	2f ef       	ldi	r18, 0xFF	; 255
 4c0:	92 07       	cpc	r25, r18
 4c2:	31 f4       	brne	.+12     	; 0x4d0 <_Z41__static_initialization_and_destruction_0ii+0x36>
#include <avr/interrupt.h>
#include <util/delay.h>

#include "DualShift.h"

DualShift output(&PORTB, 0);
 4c4:	40 e0       	ldi	r20, 0x00	; 0
 4c6:	65 e2       	ldi	r22, 0x25	; 37
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	91 e0       	ldi	r25, 0x01	; 1
 4ce:	c6 de       	rcall	.-628    	; 0x25c <_ZN9DualShiftC1EPVhh>
 4d0:	0f 90       	pop	r0
		_delay_ms(100);
		setOutput(t++);
	}

	return 0;
}
 4d2:	0f 90       	pop	r0
 4d4:	0f 90       	pop	r0
 4d6:	0f 90       	pop	r0
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <_GLOBAL__sub_I_output>:
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
 4e6:	6f ef       	ldi	r22, 0xFF	; 255
 4e8:	7f ef       	ldi	r23, 0xFF	; 255
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	d5 df       	rcall	.-86     	; 0x49a <_Z41__static_initialization_and_destruction_0ii>
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	08 95       	ret

000004f6 <__tablejump2__>:
 4f6:	ee 0f       	add	r30, r30
 4f8:	ff 1f       	adc	r31, r31

000004fa <__tablejump__>:
 4fa:	05 90       	lpm	r0, Z+
 4fc:	f4 91       	lpm	r31, Z
 4fe:	e0 2d       	mov	r30, r0
 500:	09 94       	ijmp

00000502 <__cmpsf2>:
 502:	2f d0       	rcall	.+94     	; 0x562 <__fp_cmp>
 504:	08 f4       	brcc	.+2      	; 0x508 <__cmpsf2+0x6>
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	08 95       	ret

0000050a <__fixunssfsi>:
 50a:	57 d0       	rcall	.+174    	; 0x5ba <__fp_splitA>
 50c:	88 f0       	brcs	.+34     	; 0x530 <__fixunssfsi+0x26>
 50e:	9f 57       	subi	r25, 0x7F	; 127
 510:	90 f0       	brcs	.+36     	; 0x536 <__fixunssfsi+0x2c>
 512:	b9 2f       	mov	r27, r25
 514:	99 27       	eor	r25, r25
 516:	b7 51       	subi	r27, 0x17	; 23
 518:	a0 f0       	brcs	.+40     	; 0x542 <__fixunssfsi+0x38>
 51a:	d1 f0       	breq	.+52     	; 0x550 <__fixunssfsi+0x46>
 51c:	66 0f       	add	r22, r22
 51e:	77 1f       	adc	r23, r23
 520:	88 1f       	adc	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	1a f0       	brmi	.+6      	; 0x52c <__fixunssfsi+0x22>
 526:	ba 95       	dec	r27
 528:	c9 f7       	brne	.-14     	; 0x51c <__fixunssfsi+0x12>
 52a:	12 c0       	rjmp	.+36     	; 0x550 <__fixunssfsi+0x46>
 52c:	b1 30       	cpi	r27, 0x01	; 1
 52e:	81 f0       	breq	.+32     	; 0x550 <__fixunssfsi+0x46>
 530:	5e d0       	rcall	.+188    	; 0x5ee <__fp_zero>
 532:	b1 e0       	ldi	r27, 0x01	; 1
 534:	08 95       	ret
 536:	5b c0       	rjmp	.+182    	; 0x5ee <__fp_zero>
 538:	67 2f       	mov	r22, r23
 53a:	78 2f       	mov	r23, r24
 53c:	88 27       	eor	r24, r24
 53e:	b8 5f       	subi	r27, 0xF8	; 248
 540:	39 f0       	breq	.+14     	; 0x550 <__fixunssfsi+0x46>
 542:	b9 3f       	cpi	r27, 0xF9	; 249
 544:	cc f3       	brlt	.-14     	; 0x538 <__fixunssfsi+0x2e>
 546:	86 95       	lsr	r24
 548:	77 95       	ror	r23
 54a:	67 95       	ror	r22
 54c:	b3 95       	inc	r27
 54e:	d9 f7       	brne	.-10     	; 0x546 <__fixunssfsi+0x3c>
 550:	3e f4       	brtc	.+14     	; 0x560 <__fixunssfsi+0x56>
 552:	90 95       	com	r25
 554:	80 95       	com	r24
 556:	70 95       	com	r23
 558:	61 95       	neg	r22
 55a:	7f 4f       	sbci	r23, 0xFF	; 255
 55c:	8f 4f       	sbci	r24, 0xFF	; 255
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	08 95       	ret

00000562 <__fp_cmp>:
 562:	99 0f       	add	r25, r25
 564:	00 08       	sbc	r0, r0
 566:	55 0f       	add	r21, r21
 568:	aa 0b       	sbc	r26, r26
 56a:	e0 e8       	ldi	r30, 0x80	; 128
 56c:	fe ef       	ldi	r31, 0xFE	; 254
 56e:	16 16       	cp	r1, r22
 570:	17 06       	cpc	r1, r23
 572:	e8 07       	cpc	r30, r24
 574:	f9 07       	cpc	r31, r25
 576:	c0 f0       	brcs	.+48     	; 0x5a8 <__fp_cmp+0x46>
 578:	12 16       	cp	r1, r18
 57a:	13 06       	cpc	r1, r19
 57c:	e4 07       	cpc	r30, r20
 57e:	f5 07       	cpc	r31, r21
 580:	98 f0       	brcs	.+38     	; 0x5a8 <__fp_cmp+0x46>
 582:	62 1b       	sub	r22, r18
 584:	73 0b       	sbc	r23, r19
 586:	84 0b       	sbc	r24, r20
 588:	95 0b       	sbc	r25, r21
 58a:	39 f4       	brne	.+14     	; 0x59a <__fp_cmp+0x38>
 58c:	0a 26       	eor	r0, r26
 58e:	61 f0       	breq	.+24     	; 0x5a8 <__fp_cmp+0x46>
 590:	23 2b       	or	r18, r19
 592:	24 2b       	or	r18, r20
 594:	25 2b       	or	r18, r21
 596:	21 f4       	brne	.+8      	; 0x5a0 <__fp_cmp+0x3e>
 598:	08 95       	ret
 59a:	0a 26       	eor	r0, r26
 59c:	09 f4       	brne	.+2      	; 0x5a0 <__fp_cmp+0x3e>
 59e:	a1 40       	sbci	r26, 0x01	; 1
 5a0:	a6 95       	lsr	r26
 5a2:	8f ef       	ldi	r24, 0xFF	; 255
 5a4:	81 1d       	adc	r24, r1
 5a6:	81 1d       	adc	r24, r1
 5a8:	08 95       	ret

000005aa <__fp_split3>:
 5aa:	57 fd       	sbrc	r21, 7
 5ac:	90 58       	subi	r25, 0x80	; 128
 5ae:	44 0f       	add	r20, r20
 5b0:	55 1f       	adc	r21, r21
 5b2:	59 f0       	breq	.+22     	; 0x5ca <__fp_splitA+0x10>
 5b4:	5f 3f       	cpi	r21, 0xFF	; 255
 5b6:	71 f0       	breq	.+28     	; 0x5d4 <__fp_splitA+0x1a>
 5b8:	47 95       	ror	r20

000005ba <__fp_splitA>:
 5ba:	88 0f       	add	r24, r24
 5bc:	97 fb       	bst	r25, 7
 5be:	99 1f       	adc	r25, r25
 5c0:	61 f0       	breq	.+24     	; 0x5da <__fp_splitA+0x20>
 5c2:	9f 3f       	cpi	r25, 0xFF	; 255
 5c4:	79 f0       	breq	.+30     	; 0x5e4 <__fp_splitA+0x2a>
 5c6:	87 95       	ror	r24
 5c8:	08 95       	ret
 5ca:	12 16       	cp	r1, r18
 5cc:	13 06       	cpc	r1, r19
 5ce:	14 06       	cpc	r1, r20
 5d0:	55 1f       	adc	r21, r21
 5d2:	f2 cf       	rjmp	.-28     	; 0x5b8 <__fp_split3+0xe>
 5d4:	46 95       	lsr	r20
 5d6:	f1 df       	rcall	.-30     	; 0x5ba <__fp_splitA>
 5d8:	08 c0       	rjmp	.+16     	; 0x5ea <__fp_splitA+0x30>
 5da:	16 16       	cp	r1, r22
 5dc:	17 06       	cpc	r1, r23
 5de:	18 06       	cpc	r1, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	f1 cf       	rjmp	.-30     	; 0x5c6 <__fp_splitA+0xc>
 5e4:	86 95       	lsr	r24
 5e6:	71 05       	cpc	r23, r1
 5e8:	61 05       	cpc	r22, r1
 5ea:	08 94       	sec
 5ec:	08 95       	ret

000005ee <__fp_zero>:
 5ee:	e8 94       	clt

000005f0 <__fp_szero>:
 5f0:	bb 27       	eor	r27, r27
 5f2:	66 27       	eor	r22, r22
 5f4:	77 27       	eor	r23, r23
 5f6:	cb 01       	movw	r24, r22
 5f8:	97 f9       	bld	r25, 7
 5fa:	08 95       	ret

000005fc <__gesf2>:
 5fc:	b2 df       	rcall	.-156    	; 0x562 <__fp_cmp>
 5fe:	08 f4       	brcc	.+2      	; 0x602 <__gesf2+0x6>
 600:	8f ef       	ldi	r24, 0xFF	; 255
 602:	08 95       	ret

00000604 <__mulsf3>:
 604:	0b d0       	rcall	.+22     	; 0x61c <__mulsf3x>
 606:	78 c0       	rjmp	.+240    	; 0x6f8 <__fp_round>
 608:	69 d0       	rcall	.+210    	; 0x6dc <__fp_pscA>
 60a:	28 f0       	brcs	.+10     	; 0x616 <__mulsf3+0x12>
 60c:	6e d0       	rcall	.+220    	; 0x6ea <__fp_pscB>
 60e:	18 f0       	brcs	.+6      	; 0x616 <__mulsf3+0x12>
 610:	95 23       	and	r25, r21
 612:	09 f0       	breq	.+2      	; 0x616 <__mulsf3+0x12>
 614:	5a c0       	rjmp	.+180    	; 0x6ca <__fp_inf>
 616:	5f c0       	rjmp	.+190    	; 0x6d6 <__fp_nan>
 618:	11 24       	eor	r1, r1
 61a:	ea cf       	rjmp	.-44     	; 0x5f0 <__fp_szero>

0000061c <__mulsf3x>:
 61c:	c6 df       	rcall	.-116    	; 0x5aa <__fp_split3>
 61e:	a0 f3       	brcs	.-24     	; 0x608 <__mulsf3+0x4>

00000620 <__mulsf3_pse>:
 620:	95 9f       	mul	r25, r21
 622:	d1 f3       	breq	.-12     	; 0x618 <__mulsf3+0x14>
 624:	95 0f       	add	r25, r21
 626:	50 e0       	ldi	r21, 0x00	; 0
 628:	55 1f       	adc	r21, r21
 62a:	62 9f       	mul	r22, r18
 62c:	f0 01       	movw	r30, r0
 62e:	72 9f       	mul	r23, r18
 630:	bb 27       	eor	r27, r27
 632:	f0 0d       	add	r31, r0
 634:	b1 1d       	adc	r27, r1
 636:	63 9f       	mul	r22, r19
 638:	aa 27       	eor	r26, r26
 63a:	f0 0d       	add	r31, r0
 63c:	b1 1d       	adc	r27, r1
 63e:	aa 1f       	adc	r26, r26
 640:	64 9f       	mul	r22, r20
 642:	66 27       	eor	r22, r22
 644:	b0 0d       	add	r27, r0
 646:	a1 1d       	adc	r26, r1
 648:	66 1f       	adc	r22, r22
 64a:	82 9f       	mul	r24, r18
 64c:	22 27       	eor	r18, r18
 64e:	b0 0d       	add	r27, r0
 650:	a1 1d       	adc	r26, r1
 652:	62 1f       	adc	r22, r18
 654:	73 9f       	mul	r23, r19
 656:	b0 0d       	add	r27, r0
 658:	a1 1d       	adc	r26, r1
 65a:	62 1f       	adc	r22, r18
 65c:	83 9f       	mul	r24, r19
 65e:	a0 0d       	add	r26, r0
 660:	61 1d       	adc	r22, r1
 662:	22 1f       	adc	r18, r18
 664:	74 9f       	mul	r23, r20
 666:	33 27       	eor	r19, r19
 668:	a0 0d       	add	r26, r0
 66a:	61 1d       	adc	r22, r1
 66c:	23 1f       	adc	r18, r19
 66e:	84 9f       	mul	r24, r20
 670:	60 0d       	add	r22, r0
 672:	21 1d       	adc	r18, r1
 674:	82 2f       	mov	r24, r18
 676:	76 2f       	mov	r23, r22
 678:	6a 2f       	mov	r22, r26
 67a:	11 24       	eor	r1, r1
 67c:	9f 57       	subi	r25, 0x7F	; 127
 67e:	50 40       	sbci	r21, 0x00	; 0
 680:	8a f0       	brmi	.+34     	; 0x6a4 <__mulsf3_pse+0x84>
 682:	e1 f0       	breq	.+56     	; 0x6bc <__mulsf3_pse+0x9c>
 684:	88 23       	and	r24, r24
 686:	4a f0       	brmi	.+18     	; 0x69a <__mulsf3_pse+0x7a>
 688:	ee 0f       	add	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	bb 1f       	adc	r27, r27
 68e:	66 1f       	adc	r22, r22
 690:	77 1f       	adc	r23, r23
 692:	88 1f       	adc	r24, r24
 694:	91 50       	subi	r25, 0x01	; 1
 696:	50 40       	sbci	r21, 0x00	; 0
 698:	a9 f7       	brne	.-22     	; 0x684 <__mulsf3_pse+0x64>
 69a:	9e 3f       	cpi	r25, 0xFE	; 254
 69c:	51 05       	cpc	r21, r1
 69e:	70 f0       	brcs	.+28     	; 0x6bc <__mulsf3_pse+0x9c>
 6a0:	14 c0       	rjmp	.+40     	; 0x6ca <__fp_inf>
 6a2:	a6 cf       	rjmp	.-180    	; 0x5f0 <__fp_szero>
 6a4:	5f 3f       	cpi	r21, 0xFF	; 255
 6a6:	ec f3       	brlt	.-6      	; 0x6a2 <__mulsf3_pse+0x82>
 6a8:	98 3e       	cpi	r25, 0xE8	; 232
 6aa:	dc f3       	brlt	.-10     	; 0x6a2 <__mulsf3_pse+0x82>
 6ac:	86 95       	lsr	r24
 6ae:	77 95       	ror	r23
 6b0:	67 95       	ror	r22
 6b2:	b7 95       	ror	r27
 6b4:	f7 95       	ror	r31
 6b6:	e7 95       	ror	r30
 6b8:	9f 5f       	subi	r25, 0xFF	; 255
 6ba:	c1 f7       	brne	.-16     	; 0x6ac <__mulsf3_pse+0x8c>
 6bc:	fe 2b       	or	r31, r30
 6be:	88 0f       	add	r24, r24
 6c0:	91 1d       	adc	r25, r1
 6c2:	96 95       	lsr	r25
 6c4:	87 95       	ror	r24
 6c6:	97 f9       	bld	r25, 7
 6c8:	08 95       	ret

000006ca <__fp_inf>:
 6ca:	97 f9       	bld	r25, 7
 6cc:	9f 67       	ori	r25, 0x7F	; 127
 6ce:	80 e8       	ldi	r24, 0x80	; 128
 6d0:	70 e0       	ldi	r23, 0x00	; 0
 6d2:	60 e0       	ldi	r22, 0x00	; 0
 6d4:	08 95       	ret

000006d6 <__fp_nan>:
 6d6:	9f ef       	ldi	r25, 0xFF	; 255
 6d8:	80 ec       	ldi	r24, 0xC0	; 192
 6da:	08 95       	ret

000006dc <__fp_pscA>:
 6dc:	00 24       	eor	r0, r0
 6de:	0a 94       	dec	r0
 6e0:	16 16       	cp	r1, r22
 6e2:	17 06       	cpc	r1, r23
 6e4:	18 06       	cpc	r1, r24
 6e6:	09 06       	cpc	r0, r25
 6e8:	08 95       	ret

000006ea <__fp_pscB>:
 6ea:	00 24       	eor	r0, r0
 6ec:	0a 94       	dec	r0
 6ee:	12 16       	cp	r1, r18
 6f0:	13 06       	cpc	r1, r19
 6f2:	14 06       	cpc	r1, r20
 6f4:	05 06       	cpc	r0, r21
 6f6:	08 95       	ret

000006f8 <__fp_round>:
 6f8:	09 2e       	mov	r0, r25
 6fa:	03 94       	inc	r0
 6fc:	00 0c       	add	r0, r0
 6fe:	11 f4       	brne	.+4      	; 0x704 <__fp_round+0xc>
 700:	88 23       	and	r24, r24
 702:	52 f0       	brmi	.+20     	; 0x718 <__fp_round+0x20>
 704:	bb 0f       	add	r27, r27
 706:	40 f4       	brcc	.+16     	; 0x718 <__fp_round+0x20>
 708:	bf 2b       	or	r27, r31
 70a:	11 f4       	brne	.+4      	; 0x710 <__fp_round+0x18>
 70c:	60 ff       	sbrs	r22, 0
 70e:	04 c0       	rjmp	.+8      	; 0x718 <__fp_round+0x20>
 710:	6f 5f       	subi	r22, 0xFF	; 255
 712:	7f 4f       	sbci	r23, 0xFF	; 255
 714:	8f 4f       	sbci	r24, 0xFF	; 255
 716:	9f 4f       	sbci	r25, 0xFF	; 255
 718:	08 95       	ret

0000071a <_exit>:
 71a:	f8 94       	cli

0000071c <__stop_program>:
 71c:	ff cf       	rjmp	.-2      	; 0x71c <__stop_program>
